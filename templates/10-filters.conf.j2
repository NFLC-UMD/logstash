##
# {{ ansible_managed }}
#

filter {
	# Version 1 - pre-json text format logs
	if [@version] == "1" {

		# Deprecated, to be removed when this log style no longer appears in ELK
		if [type] == "syslog" {
			grok {
				match => { "rawmsg" => "(?m)%{SYSLOG5424LINE}" }
			}
			syslog_pri { }
			if !("_grokparsefailure" in [tags]) {
				mutate {
					replace => [ "message", "%{syslog5424_msg}" ]
					replace => [ "timestamp", "%{syslog5424_ts}" ]
					replace => [ "priority", "%{syslog5424_pri}" ]
					replace => [ "program", "%{syslog5424_app}" ]
					replace => [ "facility", "%{syslog_facility}" ]
					replace => [ "severity", "%{syslog_severity}" ]
					replace => [ "received_at", "%{@timestamp}" ]
				}
				mutate {
					remove_field => [ "rawmsg", "syslog5424_host", "syslog5424_msg", "syslog5424_ts", "syslog5424_pri", "syslog5424_app", "syslog5424_proc", "syslog5424_ver", "syslog_facility", "syslog_facility_code" , "syslog_severity", "syslog_severity_code" ]
				}
			}
		}

		# Deprecated, to be removed when this log style no longer appears in ELK
		if [type] == "nginx-access" {
			grok {
				match => [
					"message", "%{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:httptimestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float} %{NUMBER:upstream_time:float} \"(%{NUMBER:user_id:int}|-)?\" \"(%{UUID:request_id}|-)?\"",
					"message", "%{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:httptimestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float} %{NUMBER:upstream_time:float}",
					"message", "%{IPORHOST:http_host} %{IPORHOST:clientip} \[%{HTTPDATE:httptimestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) %{QS:referrer} %{QS:agent} %{NUMBER:request_time:float}"
				]
				add_field => [ "received_at", "%{@timestamp}" ]
				add_field => [ "index_name", "accesslogs" ]
			}
			date {
				match => [ "httptimestamp" , "dd/MMM/YYYY:HH:mm:ss Z" ]
			}
			geoip {
				source => "clientip"
			}
			mutate {
				remove_field => [ "httptimestamp", "agent", "bytes", "httpversion", "message", "upstream_time", "timestamp" ]
			}
		}

		if [type] == "application-logs" {
			# hacks until we go full json
			if [message] =~ "requestId=[A-Fa-f0-9]{8}-(?:[A-Fa-f0-9]{4}-){3}[A-Fa-f0-9]{12}" {
				grok {
					match => [
						"message", "requestId=%{UUID:request_id}"
					]
				}
			}
			if [message] =~ "user=[0-9]+" {
				grok {
					match => [
						"message", "user=%{NUMBER:user_id:int}"
					]
				}
			}
			if [message] =~ "duration=[0-9]*\.?[0-9]+." {
				grok {
					match => [
						"message", "duration=%{NUMBER:duration:float}"
					]
				}
			}
			date {
				match => [ "timestamp" , "ISO8601" ]
			}
		}
	}

	# Version 2 - should be used for pure json logs
	if [@version] == "2" {

		# Access logs have their own index
		if [type] == "nginx-access-logs" {
			# We can't trust Nginx to not put "-" in place for numerical values if they are empty
			# so we have to do some parsing here unfortunately
			if [response_length] =~ "^\-?$" {
				mutate {
					remove_field => "response_length"
				}
			} else {
				mutate {
					convert => { "response_length" => "integer" }
				}
			}
			if [request_length] =~ "^\-?$" {
				mutate {
					remove_field => "request_length"
				}
			} else {
				mutate {
					convert => { "request_length" => "integer" }
				}
			}
			if [request_time] =~ "^\-?$" {
				mutate {
					remove_field => "request_time"
				}
			} else {
				mutate {
					convert => { "request_time" => "float" }
				}
			}
			if [user_id] =~ "^\-?$" {
				mutate {
					remove_field => "user_id"
				}
			}
			grok {
				match => [
					"request_full", "%{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})"
				]
				add_field => [ "index_name", "accesslogs" ]
			}
			prune {
				whitelist_names => [
					"^http_host$",
					"^clientip$",
					"^remote_ip$",
					"^datetime$",
					"^request$",
					"^response$",
					"^response_length$",
					"^request_length$",
					"^request_time$",
					"^user_id$",
					"^request_id$",
					"^type$",
					"^host$",
					"^@version$",
					"^role$",
					"^sourcefile$",
					"^verb$",
					"^index_name$"
				]
			}
		}

		# Deal with different time formats
		if [datetime] {
			date {
				match => [ "datetime" , "ISO8601" ]
			}
			mutate {
				remove_field => [ "datetime" ]
			}
		}
		if [timestamp_unix] {
			date {
				match => [ "timestamp_unix" , "UNIX" ]
			}
			mutate {
				remove_field => [ "timestamp_unix" ]
			}
		}
		if [time] {
			date {
				match => [ "time" , "ISO8601" ]
			}
			mutate {
				remove_field => [ "time" ]
			}
		}

		# ensure some fields are in the right format
		if [level] {
			mutate {
				convert => { "level" => "string" }
			}
		}
		if [user_id] {
			mutate {
				convert => { "user_id" => "integer" }
			}
		}

	}

	if "_grokparsefailure" in [tags] {
		drop { }
	}
}
